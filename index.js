"use strict";
var async = require("async");
var Promise = require("bluebird");
var modbus_eastron_1 = require('modbus-eastron');
var rpj = require("request-promise-json");
var moment = require("moment-timezone");
var default_1 = (function () {
    function default_1(disps) {
        this.devices = disps;
        this.validTime = false;
    }
    default_1.prototype.loopStop = function () {
        if (this.loopVar) {
            clearInterval(this.loopVar);
        }
        else {
            console.error("not exists");
        }
    };
    default_1.prototype.loopStart = function (options) {
        var _this = this;
        if (!_this.loopVar) {
            console.log("starting");
            if (!options.interval)
                options.interval = 300000;
            function loopBoot() {
                _this.loopVar = setInterval(function () {
                    _this.data().then(function (answers) {
                        if (options.done) {
                            options.done(answers);
                        }
                    }).catch(function (err) {
                        console.warn(err);
                    });
                }, options.interval);
            }
            if (_this.checkTime && options.checkDate && _this.validTime) {
                loopBoot();
            }
            else {
                if (!_this.checkTime) {
                    _this.checkTime = true;
                    _this.checkDate();
                    console.warn("checkTime");
                    setTimeout(function () {
                        _this.loopStart(options);
                    }, 5000);
                }
                else {
                    console.warn("waiting for correct time");
                    setTimeout(function () {
                        _this.loopStart(options);
                    }, 3000);
                }
            }
        }
        else {
            console.error("exists");
        }
    };
    default_1.prototype.data = function () {
        var disps = this.devices;
        return new Promise(function (resolve, reject) {
            var answers = [];
            async.eachSeries(disps, function (iterator, cb) {
                modbus_eastron_1.default(iterator).then(function (a) {
                    a.active = true;
                    answers.push(a);
                    cb();
                }).catch(function (err) {
                    answers.push({
                        active: false,
                        _id: iterator.uid,
                        uid: iterator.uid,
                        unixTime: 0
                    });
                    console.error(err);
                    cb();
                });
            }, function (err) {
                if (err) {
                    console.log(err);
                    reject(err);
                }
                else {
                    resolve(answers);
                }
            });
        });
    };
    default_1.prototype.checkDate = function () {
        var that = this;
        function checkRemote() {
            rpj.get("https://io.kernel.online/date").then(function (date) {
                console.log(date);
                if (new Date().getTime() > (date.unixtime - 90000)) {
                    console.log("time is valid from now");
                    that.validTime = true;
                }
                else {
                    checkRemote();
                }
            }).catch(function (err) {
                console.log(err);
                checkRemote();
            });
        }
        checkRemote();
    };
    return default_1;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;

//# sourceMappingURL=data:application/json;base64,
