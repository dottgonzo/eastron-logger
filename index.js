"use strict";
var async = require("async");
var Promise = require("bluebird");
var modbus_eastron_1 = require('modbus-eastron');
var rpj = require("request-promise-json");
var default_1 = (function () {
    function default_1(disps) {
        this.devices = disps;
        this.validTime = false;
    }
    default_1.prototype.loopStop = function () {
        if (this.loopVar) {
            clearInterval(this.loopVar);
        }
        else {
            console.error("not exists");
        }
    };
    default_1.prototype.loopStart = function (options) {
        var _this = this;
        if (!_this.loopVar) {
            console.log("starting");
            if (!options.interval)
                options.interval = 300000;
            function loopBoot() {
                _this.loopVar = setInterval(function () {
                    _this.data().then(function (answers) {
                        if (options.done) {
                            options.done(answers);
                        }
                    }).catch(function (err) {
                        console.warn(err);
                    });
                }, options.interval);
            }
            if (_this.checkTime && options.checkDate && _this.validTime) {
                loopBoot();
            }
            else {
                if (!_this.checkTime) {
                    _this.checkTime = true;
                    _this.checkDate();
                    console.warn("checkTime");
                    setTimeout(function () {
                        _this.loopStart(options);
                    }, 5000);
                }
                else {
                    console.warn("waiting for correct time");
                    setTimeout(function () {
                        _this.loopStart(options);
                    }, 3000);
                }
            }
        }
        else {
            console.error("exists");
        }
    };
    default_1.prototype.data = function () {
        var disps = this.devices;
        return new Promise(function (resolve, reject) {
            var answers = [];
            async.eachSeries(disps, function (iterator, cb) {
                modbus_eastron_1.default(iterator).then(function (a) {
                    a.working = true;
                    answers.push(a);
                    cb();
                }).catch(function (err) {
                    answers.push({
                        working: false,
                        _id: iterator.uid,
                        uid: iterator.uid,
                        unixTime: 0
                    });
                    console.error('err', err);
                    cb();
                });
            }, function (err) {
                if (err) {
                    console.log(err);
                    reject(err);
                }
                else {
                    resolve(answers);
                }
            });
        });
    };
    default_1.prototype.checkDate = function () {
        var that = this;
        function checkRemote() {
            rpj.get("https://io.kernel.online/date").then(function (date) {
                console.log(date);
                if (new Date().getTime() > (date.unixtime - 90000)) {
                    console.log("time is valid from now");
                    that.validTime = true;
                }
                else {
                    checkRemote();
                }
            }).catch(function (err) {
                console.log(err);
                checkRemote();
            });
        }
        checkRemote();
    };
    return default_1;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;

//# sourceMappingURL=data:application/json;base64,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QUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUNoQjtZQUNJLEdBQUcsQ0FBQyxHQUFHLENBQUMsK0JBQStCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJO2dCQUV4RCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUVsQixFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2pELE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQztvQkFDdEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7Z0JBQzFCLENBQUM7Z0JBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ0osV0FBVyxFQUFFLENBQUM7Z0JBQ2xCLENBQUM7WUFFTCxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHO2dCQUNsQixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNqQixXQUFXLEVBQUUsQ0FBQztZQUNsQixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUM7UUFFRCxXQUFXLEVBQUUsQ0FBQztJQUNsQixDQUFDO0lBQ0wsZ0JBQUM7QUFBRCxDQW5JQSxBQW1JQyxJQUFBO0FBbklEOzJCQW1JQyxDQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXN5bmMgZnJvbSBcImFzeW5jXCI7XG5pbXBvcnQgKiBhcyBQcm9taXNlIGZyb20gXCJibHVlYmlyZFwiO1xuXG5pbXBvcnQgRWFzdHJvbiBmcm9tICdtb2RidXMtZWFzdHJvbic7XG5cbmxldCBycGogPSByZXF1aXJlKFwicmVxdWVzdC1wcm9taXNlLWpzb25cIik7XG5cblxuXG5pbnRlcmZhY2UgRWFzdHJvbkRldmljZSB7XG4gICAgZGV2Pzogc3RyaW5nO1xuICAgIGh1Yj86IHN0cmluZztcbiAgICBiYXVkOiBudW1iZXI7XG4gICAgaWQ6IG51bWJlcjtcbiAgICB1aWQ/OiBzdHJpbmc7XG4gICAgbW9kZWw6IHN0cmluZztcbn1cblxuXG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xuICAgIGRldmljZXM6IEVhc3Ryb25EZXZpY2VbXTtcbiAgICB2YWxpZFRpbWU6IGJvb2xlYW47XG4gICAgY2hlY2tUaW1lOiBib29sZWFuO1xuICAgIGxvb3BUaW1lOiBudW1iZXI7XG4gICAgbG9vcFZhcjogYW55O1xuICAgIGxhc3Q6IGFueVxuXG4gICAgY29uc3RydWN0b3IoZGlzcHM6IEVhc3Ryb25EZXZpY2VbXSkge1xuICAgICAgICB0aGlzLmRldmljZXMgPSBkaXNwcztcbiAgICAgICAgdGhpcy52YWxpZFRpbWUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBsb29wU3RvcCgpIHtcbiAgICAgICAgaWYgKHRoaXMubG9vcFZhcikge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmxvb3BWYXIpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwibm90IGV4aXN0c1wiKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbG9vcFN0YXJ0KG9wdGlvbnM6IHsgaW50ZXJ2YWw/OiBudW1iZXI7IGNoZWNrRGF0ZT86IGJvb2xlYW4sIGRvbmU/OiBGdW5jdGlvbiB9KSB7XG5cbiAgICAgICAgY29uc3QgX3RoaXMgPSB0aGlzXG5cbiAgICAgICAgaWYgKCFfdGhpcy5sb29wVmFyKSB7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic3RhcnRpbmdcIilcblxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmludGVydmFsKSBvcHRpb25zLmludGVydmFsID0gMzAwMDAwO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBsb29wQm9vdCgpIHtcblxuICAgICAgICAgICAgICAgIF90aGlzLmxvb3BWYXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmRhdGEoKS50aGVuKGZ1bmN0aW9uIChhbnN3ZXJzOiBhbnlbXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZG9uZShhbnN3ZXJzKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oZXJyKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH0sIG9wdGlvbnMuaW50ZXJ2YWwpO1xuXG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgaWYgKF90aGlzLmNoZWNrVGltZSAmJiBvcHRpb25zLmNoZWNrRGF0ZSAmJiBfdGhpcy52YWxpZFRpbWUpIHtcblxuICAgICAgICAgICAgICAgIGxvb3BCb290KClcblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuY2hlY2tUaW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNoZWNrVGltZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNoZWNrRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJjaGVja1RpbWVcIilcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb29wU3RhcnQob3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgfSwgNTAwMClcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJ3YWl0aW5nIGZvciBjb3JyZWN0IHRpbWVcIilcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb29wU3RhcnQob3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgfSwgMzAwMClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiZXhpc3RzXCIpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkYXRhKCkge1xuICAgICAgICBsZXQgZGlzcHMgPSB0aGlzLmRldmljZXNcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblxuXG4gICAgICAgICAgICBjb25zdCBhbnN3ZXJzID0gW107XG5cbiAgICAgICAgICAgIGFzeW5jLmVhY2hTZXJpZXMoZGlzcHMsIGZ1bmN0aW9uIChpdGVyYXRvciwgY2IpIHtcblxuXG5cbiAgICAgICAgICAgICAgICAgICAgRWFzdHJvbihpdGVyYXRvcikudGhlbigoYTogYW55KSA9PiB7IC8vIGFjdGl2ZSBmbGFnIGlzIG5lZWRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgYS53b3JraW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlcnMucHVzaChhKVxuICAgICAgICAgICAgICAgICAgICAgICAgY2IoKVxuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbnN3ZXJzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pZDogaXRlcmF0b3IudWlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpZDogaXRlcmF0b3IudWlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXhUaW1lOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignZXJyJywgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNiKClcbiAgICAgICAgICAgICAgICAgICAgfSlcblxuXG5cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGFuc3dlcnMpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG4gICAgY2hlY2tEYXRlKCkge1xuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrUmVtb3RlKCkge1xuICAgICAgICAgICAgcnBqLmdldChcImh0dHBzOi8vaW8ua2VybmVsLm9ubGluZS9kYXRlXCIpLnRoZW4oZnVuY3Rpb24gKGRhdGUpIHtcblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5ldyBEYXRlKCkuZ2V0VGltZSgpID4gKGRhdGUudW5peHRpbWUgLSA5MDAwMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0aW1lIGlzIHZhbGlkIGZyb20gbm93XCIpO1xuICAgICAgICAgICAgICAgICAgICB0aGF0LnZhbGlkVGltZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tSZW1vdGUoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgICAgIGNoZWNrUmVtb3RlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoZWNrUmVtb3RlKCk7XG4gICAgfVxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
